<h1>About</h1>
<p></p>
<p>四設計三甲 40923102 王悅禎-個人課程網站</p>
<p></p>
<p>倉儲:<a href="https://github.com/mdecp2022/site-40923102">https://github.com/mdecp2022/site-40923102</a></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p>cmsite: wcms use <a href="https://github.com/mdecycu/cmsimde">https://github.com/mdecycu/cmsimde</a> as submodule</p>
<p></p>
<h1>課程相關</h1>
<h2>評分標準</h2>
<p>w3 建立<span> </span><a href="https://tcexam.org/">TCExam</a><span> </span>帳號, 進行模擬考試.</p>
<p>w4 Exam1 (5%)</p>
<p>w8 Exam2 (5%)</p>
<p>w9 Exam3 (5%)</p>
<p>w12 Exam4 (5%)</p>
<p>w16 Exam5 (5%)</p>
<p>w18 Exam6 (5%)</p>
<p>Github Repository and Pages (70%)</p>
<p>個人簡歷與課程進度心得</p>
<p>課程內容操作影片 (<a href="https://www.debugmode.com/wink/">Wink3</a>)</p>
<p>期中程式專案</p>
<p>期末程式專案</p>
<p></p>
<h1>每周筆記(期中)</h1>
<p>記錄每一週計算機程式，我的狀況記錄</p>
<h2>w1</h2>
<p>中秋節連假 放假</p>
<p><img alt="" height="350" src="/images/1601522103-e83f1fbb6cdccbf19803425ecdf93d4c.jpg" width="262"/></p>
<h2>w2</h2>
<p><strong>一</strong> <strong>認識什麼是python</strong></p>
<p></p>
<p><strong>二</strong> <strong>建立帳號</strong></p>
<p>1.github 帳號</p>
<p>2.onedrive 帳號</p>
<p></p>
<p><strong>三 設定網路環境</strong></p>
<p><a href="https://mde.tw/blog/2022-Fall-Intro-to-computer-programming.html">參考</a></p>
<p></p>
<p></p>
<h2>w3</h2>
<p></p>
<p><strong>網誌與課程內容回顧</strong></p>
<p>教學影片:<span> </span><a href="https://nfuedu.sharepoint.com/:v:/r/sites/cp20222/Shared%20Documents/w3/Recordings/2%E3%80%8Cw3%E3%80%8D%E8%AA%B2%E7%A8%8B%E7%B6%B2%E8%AA%8C%E8%A3%BD%E4%BD%9C%E8%88%87%E5%85%88%E5%89%8D%E8%AA%B2%E7%A8%8B%E5%85%A7%E5%AE%B9%E5%9B%9E%E9%A1%A7.mp4?csf=1&amp;web=1&amp;e=jHsQ7E">課程網誌製作與先前課程內容回顧</a></p>
<p></p>
<p><strong>倉儲與 Github Pages</strong></p>
<p>教學影片:<span> </span><a href="https://nfuedu.sharepoint.com/:v:/r/sites/cp20222/Shared%20Documents/w3/Recordings/4%E3%80%8Cw3%E3%80%8D%E8%AA%B2%E7%A8%8B%E5%80%89%E5%84%B2%E8%88%87%20Github%20Pages%20%E7%B6%B2%E9%A0%81%E8%A8%AD%E5%AE%9A%E6%95%99%E5%AD%B8.mp4?csf=1&amp;web=1&amp;e=5brhmf">課程倉儲與 Github Pages 網頁設定教學</a></p>
<p></p>
<h3>從教務主機擷取學員名單</h3>
<p>原先配置在 Heroku 的 [nfulist] 網際程式, 由於校務主機已經排除台灣境外網段連接, 且 Heroku 也即將終止免費帳號使用. 因此只能將程式配置在系工作站室中的電腦. 程式如下, 目前以 Ubuntu 22.04 實體主機下的 Virtualbox Win10 虛擬主機運行. 採<span> </span><a href="https://github.com/Pylons/waitress">waitress</a><span> </span>模式配置, 以<span> </span><a href="https://nssm.cc/">nssm</a><span> </span>安排成為系統服務.</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 以 Flask 作為網際框架, 
from flask import Flask, request
# 允許跨網站擷取資料
from flask_cors import CORS
 
# 利用 requests 取回網站中的頁面資料
import requests
# 利用 beautifulsoup 解讀超文件網頁內容
import bs4
# 若在近端啟動也要採用 SSL 時導入
#import ssl
 
'''
2022 Fall 各班課程代號
1a - 2b
?semester=1111&amp;courseno=0747&amp;column=True 
 
?semester=1111&amp;courseno=0761&amp;column=True 
 
?semester=1111&amp;courseno=0773&amp;column=True 
 
?semester=1111&amp;courseno=0786&amp;column=True 
 
'''
proxies ={
'http': 'http://account:password@[2001:288:6004:17::4]:3128',
'https': 'http://account:password@[2001:288:6004:17::4]:3128'
}
 
app = Flask(__name__)
CORS(app)
 
@app.route('/studlist')
@app.route('/')
def studlist():
    semester = request.args.get('semester')
    courseno = request.args.get('courseno')
    column = request.args.get('column')
 
    if semester == None:
        semester = '1091'
    if courseno == None:
        courseno = '0762'
 
    headers = {'X-Requested-With': 'XMLHttpRequest'}
 
    url = 'https://qry.nfu.edu.tw/studlist_ajax.php'
    post_var = {'pselyr': semester, 'pseqno': courseno}
 
    # 可透過 Proxy server 執行程式
    #result = requests.post(url, data = post_var, headers = headers, proxies = proxies)
    result = requests.post(url, data = post_var, headers = headers)
    soup = bs4.BeautifulSoup(result.content, 'lxml')
    table = soup.find('table', {'class': 'tbcls'})
    data = []
    rows = table.find_all('tr')
    for row in rows:
        cols = row.find_all('td')
        cols = [ele.text.strip() for ele in cols]
        data.append([ele for ele in cols if ele]) # Get rid of empty values
    output = ""
    for i in data[2:]:
        #print(i[0])
        if column == "True":
            output +=i[0] + "&lt;br&gt;"
        else:
            output +=i[0] + "\n"
 
    return output
    #return  str(pselyr) + " + " +str(pseqno)
 
# 即使在近端仍希望以 https 模式下執行
#context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
#context.load_cert_chain('localhost.crt', 'localhost.key')
 
if __name__ == '__main__':
    app.run(host='127.0.0.1', port=8080, debug=True)</pre>
<p></p>
<p><a href="https://nfu.cycu.org/?semester=1111&amp;courseno=0747&amp;column=True">1a 計算機程式修課學員名單</a><span> </span>(取自教務主機)</p>
<p></p>
<p></p>
<p></p>
<h2>w4</h2>
<p></p>
<p>git token 與 SSH 使用, Brython 抽點程式</p>
<p></p>
<p>我原先參考上面影片，但是遲遲沒有把SSH建立成功，是因為config裡面修正錯誤，建立在自己的倉儲下</p>
<p></p>
<p></p>
<p>網路設定與可攜檔案下載</p>
<p></p>
<p>後來是用replit 這個網站才推送成功，我覺得這個網站很方便，不用隨時攜帶隨身碟就可以操作</p>
<p>但是操作前ˊ要先去老師的下載區<a href="https://mdecp2022.github.io/site-40923102/content/%E5%B8%B8%E7%94%A8%E7%B6%B2%E7%AB%99.html">下載檔案</a></p>
<p></p>
<p><br/><br/><br/><strong>該如何學習 Computer Programming </strong><br/><br/></p>
<p><span data-contrast="auto"><span>進入電腦輔助設計室之後:</span></span><span> </span></p>
<ol>
<li data-aria-level="2" data-aria-posinset="1"><span data-contrast="auto"><span>登入 </span></span><a href="https://github.com"><span data-contrast="auto"><span>Github</span></span></a><span data-contrast="auto"><span> </span></span><span> </span></li>
<li data-aria-level="2" data-aria-posinset="2"><span data-contrast="auto"><span>登入 </span></span><a href="https://onedrive.live.com/about/en-us/signin"><span data-contrast="auto"><span>Onedrive</span></span></a><span> </span></li>
<li data-aria-level="2" data-aria-posinset="3"><span data-contrast="auto"><span>登入 </span></span><a href="https://replit.com"><span data-contrast="auto"><span>Replit</span></span></a><span> </span></li>
</ol>
<p><span> </span></p>
<p><span data-contrast="auto"><span>進入個人的課程倉儲: </span></span><a href="https://github.com/mdecp2022"><span data-contrast="auto"><span>https://github.com/mdecp2022</span></span></a><span data-contrast="auto"><span> </span></span><span> </span></p>
<p><span data-contrast="auto"><span>將 Github 倉儲連結, 作為 import Replit 的 URL, 建立一個新的 Repl 專案.</span></span><span> </span></p>
<p><span data-contrast="auto"><span>中英文打字技巧必須自行練習.</span></span><span> </span></p>
<p><span data-contrast="auto"><span>幾乎所有的電腦指令都源自英文單字, 因此在學習與電腦有關的過程, 千萬不要在瀏覽器中, 將英文翻譯成中文.</span></span><span> </span></p>
<p><span data-contrast="auto"><span>儘量參考英文原版資料, 碰到英文單字要自行查詢線上</span></span><a href="https://www.merriam-webster.com/"><span data-contrast="auto"><span>英英字典</span></span></a><span data-contrast="auto"><span>與</span></span><a href="https://dictionary.cambridge.org/zht/"><span data-contrast="auto"><span>英漢字典</span></span></a><span data-contrast="auto"><span>, 充分了解原意.</span></span><span> </span></p>
<p><span data-contrast="auto"><span>電腦開機後的所有動作與流程, 都是硬體 + 韌體 + 軟體 + 使用者操作綜合下所得到的結果, 學習 Computer Programming, 必須要提高好奇心, 探索特定操作下所牽涉的  hardware, firmware, software and users 之間的關聯.</span></span><span> </span></p>
<p><span data-contrast="auto"><span>在無法對 </span></span><span data-contrast="auto"><span>hardware, firmware 與 software  進行修改之前, 使用者幾乎都是透過設定達到符合使用需求的目的.</span></span><span> </span></p>
<p><span></span></p>
<p><span data-contrast="auto"><span>學習 Computer Programming 的目的, 即在針對 </span></span><span data-contrast="auto"><span>hardware, firmware 與 software  的設定之外, 自行涉入與 </span></span><span data-contrast="auto"><span>hardware, firmware 與 software 有關的內容建置或配置.</span></span><span> </span></p>
<p><span></span></p>
<p><span></span></p>
<h2>w5</h2>
<p></p>
<div><span style="color: #ff0000;">w5 起除了 <a href="https://wcms.repl.co" rel="noreferrer noopener" style="color: #ff0000;" tabindex="-1" target="_blank" title="https://wcms.repl.co/">https://wcms.repl.co</a> 我們自架了一台伺服器 <a href="https://wcms.cycu.org:5443" rel="noreferrer noopener" style="color: #ff0000;" tabindex="-1" target="_blank" title="https://wcms.cycu.org:5443/">https://wcms.cycu.org:5443</a> 理論上兩台主機內容與 <a href="https://github.com/mdecycu/wcms" rel="noreferrer noopener" style="color: #ff0000;" tabindex="-1" target="_blank" title="https://github.com/mdecycu/wcms">https://github.com/mdecycu/wcms</a> 倉儲同步.</span></div>
<div><span style="color: #ff0000;"></span></div>
<h3>密碼產生器</h3>
<div>
<div>以下利用 Python 建立一個密碼產生程式, 而此連結是將程式碼以 <a href="https://docs.github.com/en/get-started/writing-on-github/editing-and-sharing-content-with-gists/creating-gists" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://docs.github.com/en/get-started/writing-on-github/editing-and-sharing-content-with-gists/creating-gists">Github Gist</a> 格式儲存, 其結果就是 <a href="https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/8864b4178c8ec64f60d30014d3ab743499d51be4/password_generator.py" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/8864b4178c8ec64f60d30014d3ab743499d51be4/password_generator.py">password_generator.py</a> 程式, 而這個程式碼隸屬於<a href="https://gist.github.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.github.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707">這個 Gist</a>, 當使用者登入 Github 後, 就可以進入 Gist 區建立具備版次管理架構的程式內容, Gist 與 Repository 相同, 也是採 Git 倉儲架構, 當使用者每次對 Gist 更新或加入程式碼後, 每一個 Gist 都會產生一組代表版次號碼的字串, 使用者就可以根據此字串, 利用瀏覽器擷取到此段程式碼, 例如: 可以透過 <a href="https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/8864b4178c8ec64f60d30014d3ab743499d51be4/password_generator.py" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/8864b4178c8ec64f60d30014d3ab743499d51be4/password_generator.py">password_generator.py</a> 取得亂數密碼的程式, 然後在 Brython 頁面中, 再透過 URL 的變數 src 對應此 Gist 程式網址, 就可以透過 javascript 與 Brython 的整合, 將符合 Brython 規範的 Python 程式放入網頁中執行.</div>
<div><a href="https://mde.tw/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/8864b4178c8ec64f60d30014d3ab743499d51be4/password_generator.py" rel="noreferrer noopener" tabindex="-1" target="_blank" title="https://mde.tw/content/brython.html?src=https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/8864b4178c8ec64f60d30014d3ab743499d51be4/password_generator.py">password generator</a>,</div>
<div></div>
<div>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false"># 導入亂數模組
import random
# 導入字串模組
import string
# 利用 def 關鍵字定義函式
# 函式的輸入變數可以設定初始值
def password_generator(size=4, chars=string.ascii_lowercase + string.digits):
    # 函式內以多行註解說明函式功能
    """Generate random password
    """
    # 利用 return 關鍵字將所產生的亂數字串傳回
    return ''.join(random.choice(chars) for _ in range(size))
# 建立一個變數與隨後的字串對應
pass_string = "abcdefghkmnpqrstuwxyz123456789"
# 利用重複迴圈呼叫 password_generator() 函式 10 次
for i in range(10):
    print(password_generator(4, pass_string))</pre>
</div>
</div>
<h3>利用SSH對倉儲內容改版</h3>
<p></p>
<ol>
<li data-aria-level="1" data-aria-posinset="1"><span data-contrast="auto"><span>所謂 Secure Shell 就是利用</span></span><a href="https://zh.m.wikipedia.org/zh-tw/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86"><span data-contrast="auto"><span>公開金鑰加密</span></span></a><span data-contrast="auto"><span>, 在傳輸指令的過程對內容加密, 以保障資訊不被第三方取得, 當使用者在近端執行個人倉儲的動態網站後進行編輯改版, 並將動態網站轉為靜態網站, 希望將新的靜態網站內容送到 Github Pages  中的過程, 可以透過 SSH 協定建立一對數位鑰匙, 其公開鑰匙登錄到 Github SSH 設定區, 而私人鑰匙則放在近端電腦或隨身碟中, 當推送資料時只有與帳號下公鑰配對的私鑰擁有者, 有權限更改倉儲內容, 以下為在 Windows 操作系統採 SSH 對 Github 倉儲進行改版的設定過程.</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="2"><span data-contrast="auto"><span>確定  start.bat 啟動時已經設定 GIT_SSH 變數, 且與 plink.exe 連結, 表示設定之後的 Git  指令, 若採 SSH 協定與 Github 溝通, 近端的金鑰加密格式採用 Putty 所提供的 ppk 格式.</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="3"><span data-contrast="auto"><span>在 Windows 操作系統, 可以</span></span><span data-contrast="auto"><span>利用 Putty 的 puttygen.exe 產生 public key (OpenSSH 格式, 可登錄到 Github) 與 private key (ppk 格式), 且將 public key 放入 Github 帳號下 settings -&gt; SSH and GPG 設定區.</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="4"><span data-contrast="auto"><span>將 private key 存入隨身碟或 C 槽後,  送到自己的 onedrive 區, 當設定  putty.exe session 時必須在 session 使用授權區給定私鑰儲存位置.</span></span><span> </span></li>
<li data-aria-level="1" data-aria-posinset="5"><span data-contrast="auto"><span>利用 putty.exe 在電腦上設定一個 session 名稱, 且此一 session 名稱,</span></span><span data-contrast="auto"><span>代表三項資訊: a. 以 SSH  協定連結到 github.com (default port 為 22),  b. 決定需不需要使用 proxy (github.com 目前僅支援 IPv4), c. ppk 格式的 private key 位置.</span></span><span> </span></li>
</ol>
<p><span> </span></p>
<p><span data-contrast="auto"><span>利用 Putty session 以 SSH 協定 git clone 遠端倉儲, 假如前述設定都正確的話, 就可以在近端改版後, 將版本推向 Github.</span></span><span> </span></p>
<p><span> </span></p>
<p><span data-contrast="auto"><span>SSH  從 Github git clone  語法:</span></span><span> </span></p>
<p><span> </span></p>
<p><span data-contrast="auto"><span>git clone  --recurse-submodules  </span></span><a href="mailto:git@putty_session_name:github_account/repository_name.git"><span data-contrast="auto"><span>git@putty_session_name:github_account/repository_name.git</span></span></a><span> </span></p>
<p><span></span></p>
<p><strong><span class="TextRun BCX2 SCXO166627578" data-contrast="auto" lang="ZH-TW" xml:lang="ZH-TW"><span class="NormalTextRun BCX2 SCXO166627578">請特別注意  putty_session_name 與  github_account 中間</span></span></strong></p>
<p></p>
<p></p>
<p></p>
<h2>w6</h2>
<p></p>
<p>建立抽點程式</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># Python 的註解分為單行註解與多行, 單行註解可在字串前方放入 #
'''多行註解則可以透過三個單引號前後標註字串或文字段落內容, 
也可以使用三個雙引號作為多行註解的標註
'''
# 使用 import 導入 random 模組, 隨後就可以直接引用 random 模組的方法
import random
cp1a = "0747"
# 宣告 url 變數值為字串, 此字串為取得 cp2022 1a 選課成員名單
url = "https://nfu.cycu.org/?semester=1111&amp;courseno=" + cp1a + "&amp;column=True"
# 利用上述已經宣告的 url 變數字串值, 作為 open() 函式的輸入變數, 可以連結至該網站
# 連接 url 所代表字串的網站後, 再利用 read() 函式讀取該網站的內容, 即可取得 cp2022 1a 的選課成員學號
# url 所屬的網站, 乃 69 中的一台虛擬主機 8/10ff-0-1-2, 並利用 Get 從教務主機取回課程註冊成員學號
# 由於所取回的學號以跳行符號隔開, 因此取回的學號資料行, 再利用 split() 函式, 以 \n 跳行符號分割後
# 所對應到 data 的資料型別將會是數列
data = open(url).read().split("\n")
# 經過檢查 data 數列, 發現最後一個 element 為空字串, 因此利用 [:-1] 去掉數列的最後一個元素, -1 代表數列最後一個元素的索引
#print(data[:-1])
# 設定一個變數, 與修課成員學號數列對應
stud = data[:-1]
# 使用 random 模組中的 shuffle() 函式, 以隨機的方式排列 stud 數列內容
random.shuffle(stud)
# 設定 num 與 5 對應, 或將 5 整數值存入 num 變數所對應的記憶體位址
num = 5
# 利用 for 重複迴圈與 range() 變數, 列印出 (利用 print() 函式) 已經隨機排列次序的 stud 數列的最前面 num 個學號值
for i in range(num):
    print(stud[i])</pre>
<h2>w7</h2>
<p>(1)第六周程式討論</p>
<p>(2)網路設定與可攜程式系統_雙網路協定</p>
<p>利用批次檔案、登錄設定檔案與 powershell 程式設定電腦輔助設計室專用 IPv6 網路協定環境設定:</p>
<p><a href="https://nfuedu.sharepoint.com/sites/cad2022/Class%20Materials/Forms/AllItems.aspx?id=%2Fsites%2Fcad2022%2FClass%20Materials%2F2022%2Ffall%2Fcp2022%5Fw7%5Fcadlab%5Fnetwork%5Fsetup%2E7z&amp;parent=%2Fsites%2Fcad2022%2FClass%20Materials%2F2022%2Ffall&amp;p=true&amp;ct=1672940445136&amp;or=Teams%2DHL&amp;ga=1">下載 cp2022_w7_cadlab_network_setup.7z</a></p>
<p><a href="https://nfuedu.sharepoint.com/sites/cad2022/Class%20Materials/Forms/AllItems.aspx?id=%2Fsites%2Fcad2022%2FClass%20Materials%2F2022%2Ffall%2Fportable%5Fpython%5F3%2E10%2E6%5Fw7%2E7z&amp;parent=%2Fsites%2Fcad2022%2FClass%20Materials%2F2022%2Ffall&amp;p=true&amp;ct=1672940462565&amp;or=Teams%2DHL&amp;ga=1">下載 portable_python_3.10.6_w7.7z</a></p>
<p>(3)stud 伺服器與 cmsimde 子模組更新</p>
<h2>w8</h2>
<p>考試測試</p>
<p></p>
<p></p>
<h2>w9</h2>
<p>段考周，考試後即下課</p>
<p></p>
<h1>每周筆記(期末)</h1>
<h2>w10</h2>
<h2>w11</h2>
<p>運動會放假</p>
<h2>w12</h2>
<p>在接近十三週的尾聲才發現我的SSH是無法推送成功的，反覆嘗試及刪除仍無法連接遠端</p>
<h2>W13</h2>
<p>由於每個人推送方式不一老師教了token推送</p>
<h2>W14</h2>
<p></p>
<h2>W15</h2>
<p></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 這個程式用於 demo 綠色方塊沿著特定網格路徑行走
# 從 Brython 程式庫中的 browser 模組導入 document 類別, 並以簡寫設定為 doc
from browser import document as doc
# 從 browser 模組導入 html 類別, 主要用於建立 CANVAS 標註物件, 並插入頁面中
from browser import html
# 用於定時執行特定函式
import browser.timer
# 導入亂數模組
from random import random, randint

# 利用 html 建立一個 CANVAS 標註物件, 與變數 canvas 對應
canvas = html.CANVAS(width = 600, height = 600)
# 將 canvas 標註的 id 設為 "canvas"
canvas.id = "canvas"
# 將 document 中 id 為 "brython_div" 的標註
# 設為與 brython_div 變數對應
brython_div = doc["brython_div1"]
# 將 canvas 標註放入 brython_div1 所在位置
# 頁面中原本就已經放入 &lt;div id="brython_div"&gt;&lt;/div&gt; 標註
brython_div &lt;= canvas
# 將頁面中 id 為 canvas 的 CANVAS 設為與 canvas 變數對應
canvas = doc["canvas"]
# 將 canvas 的 2d 繪圖 context 命名為 ctx
ctx = canvas.getContext("2d")

# 建立一個 dRect() 函式
# s default 為 1, c defaul 為紅色
def dRect(lux, luy, w, h, s=1, c='#ff0000'):
ctx.lineWidth = s
ctx.strokeStyle = c
ctx.beginPath();
ctx.rect(lux, luy, w, h)
ctx.stroke();

# 建立畫直線函式
def draw_line(x1, y1, x2, y2, color="#ff0000"):
ctx.beginPath()
ctx.moveTo(x1, y1)
ctx.lineTo(x2, y2)
ctx.strokeStyle = color
ctx.stroke()

# 建立 write Text 函式
def wText(x, y, t, s=14, c='#0000ff'):
ctx.font = str(s) + "px Arial";
ctx.fillText(t, x, y)

# 定義畫格線的函式
def grid(startx, starty, w, h, wnum, hnum, pixel=1, color="#ff0000"):
# 利用迴圈與座標增量繪圖
# 因為輸入 wnum 與 hnum 為格子數, 畫格線數則需加上 1
for i in range(wnum+1):
for j in range(hnum+1):
# 畫上下直線
yend = starty + h*(hnum)
xend = startx + w*(wnum)
x = startx + i*w
draw_line(x, starty, x, yend, color)
# 畫左右直線
y = starty + j*h
draw_line(startx, y, xend, y, color)
#wText(w/2-10, y-w/2, str(j))

# 從兩個座標點求中心點座標
def center(lx, ly, rx, ry):
# lx is x coord of the left up corner
# rx is the x coord of th right down corner
x = (lx + rx)/2
y = (ly + ry)/2
return x, y

# 畫出填色方塊
def draw_rect(gx, gy, gw, gh, color="lime"):
# gx is the grid coord at x direction
# gy is the grid coord at y direction
# gw is the with of the green rect
# gh is the height of the green rect
lx = origx + (gx-1)*w
ly = origy + (gy-1)*h
rx = origx + gx*w
ry = origy + gy*h
cx, cy = center(lx, ly, rx, ry)
# glx is the x coord of the left corner
# gly is the y coord of the left corner
glx = cx - gw/2
gly = cy - gh/2
# 利用設定的顏色值畫出 rectangle
ctx.fillStyle = color
ctx.fillRect(glx, gly, gw, gh)

# 以白色覆蓋位於 (nowx, nowy)
# 且比目標方塊長寬各大於 1 pixel的方塊
def wipe():
draw_rect(nowx, nowy, 30+1, 30+1, color="white")

# 畫出位於 (nowx, nowy) 的綠色方塊
def draw():
draw_rect(nowx, nowy, 30, 30, color="lime")

# 繞著外圍行走
def walk():
global stepx, stepy
# 向下
if nowy &lt; hnum and nowx == 1:
stepx = 0
stepy = 1
# 向右
elif nowx &lt; wnum and nowy == hnum:
stepx = 1
stepy = 0
# 向上
elif nowy == hnum and nowx == wnum:
stepx = 0
stepy = -1
# 向左
elif nowx == wnum and nowy == 1:
stepx = -1
stepy = 0

# 每隔短暫時間即呼叫執行一次的函式
def game():
# 因 nowx 與 nowy 在函式外宣告
# 且在函式內改變對應值, 因此需宣告為 global
global nowx, nowy
walk()
wipe()
nowx += stepx
nowy += stepy
draw()

# 綠色方塊起點座標與 x 及 y 方向的座標增量
nowx = 1
nowy = 1
stepx = 0
stepy = 0
# 設定格數
# width 方向格子數
wnum = 15
# height 方向格子數
hnum = 15
# 設定線寬
pixel = 1
# 設定 w 寬度
w = int(canvas.width/wnum) - pixel
# 設定 h 高度
h = int(canvas.height/hnum) - pixel
# 設定繪圖座標點起點位置
origx = 1
origy = 1
# 利用 grid 函式畫出格線
grid(origx, origy, w, h, wnum, hnum, pixel=1, color="black")

'''
# 利用 draw_rect 以 grid 座標畫出正方形, 內建為 lime
draw_rect(3, 3, 30, 30)

# 利用隨機亂數產生五個紅色方塊
# wnum 與 hnum 為 x 與 y 方向的格子個數
# w 與 h 方向上的方塊 pixel 數
wrect_size = 30
hrect_size = 30
# 利用 for 迴圈產生五個紅色方塊
for i in range(5):
xcoord = randint(1, wnum)
ycoord = randint(1, hnum)
draw_rect(xcoord, ycoord, wrect_size, hrect_size, color="red")
'''
browser.timer.set_interval(game, 100)</pre>
<p><br/><br/></p>
<p></p>
<h1>常用網站</h1>
<p></p>
<p><a href="https://nfuedu.sharepoint.com/sites/cad2022/Class%20Materials/Forms/AllItems.aspx?ct=1665110553500&amp;or=Teams%2DHL&amp;ga=1&amp;id=%2Fsites%2Fcad2022%2FClass%20Materials%2F2022%2Ffall">下載專區</a></p>
<p></p>
<p>推倉儲 <a href="https://replit.com/">https://replit.com/</a></p>
<p><a href="https://mde.tw/content/Token%20and%20SSH.html">https://mde.tw/content/Token%20and%20SSH.html</a></p>
<p><a href="https://mde.tw/">https://mde.tw/</a></p>
<p><a href="https://mde.tw/blog/pages/about/index.html">https://mde.tw/blog/pages/about/index.html</a></p>
<p>課程公佈欄 <a href="https://wcms.repl.co/get_page/%E5%85%AC%E4%BD%88%E6%AC%84">https://wcms.repl.co/get_page/%E5%85%AC%E4%BD%88%E6%AC%84</a></p>
<p></p>
<p>考試網站:<a href="https://exam.cycu.org/">https://exam.cycu.org/</a></p>
<p></p>
<p>建立之網站:</p>
<p>建立 Github 帳號:</p>
<p><a href="https://education.github.com/">https://education.github.com/</a></p>
<p>建立 Onedrive 帳號</p>
<p>請各學員至<span> </span><a href="https://www.microsoft.com/zh-tw/education/products/office">https://www.microsoft.com/zh-tw/education/products/office</a>, 以 @nfu 帳號申請 OneDrive 儲存權限.</p>
<p>利用 Github 建立網頁:</p>
<p><a href="https://pages.github.com/">https://pages.github.com/</a></p>
<p></p>
<p></p><h1>HW</h1>
<h2>hw5</h2>
<p></p>
<p><a href="https://mdecp2022.github.io/site-40923102/content/Brython.html?src=https://gist.githubusercontent.com/40923102/157d32377f9f7121ec3849085c811e55/raw/5b9ddede5e45b2c66df5dee77c935a68ae2c980f/hw5">結果</a></p>
<p></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 導入亂數模組
import random
# 導入字串模組
import string
# 利用 def 關鍵字定義函式
# 函式的輸入變數可以設定初始值
def password_generator(size=4, chars=string.ascii_lowercase + string.digits):
    # 函式內以多行註解說明函式功能
    """Generate random password
    """
    # 利用 return 關鍵字將所產生的亂數字串傳回
    return ''.join(random.choice(chars) for _ in range(size))
# 建立一個變數與隨後的字串對應
pass_string = "abcdefghkmnpqrstuwxyz123456789"
# 利用重複迴圈呼叫 password_generator() 函式 10 次
for i in range(10):
    print(password_generator(4, pass_string))</pre>
<p></p>
<h2>hw6</h2>
<p></p>
<h2>hw10</h2>
<h2>hw11</h2>
<h2>hw12</h2>
<h2>hw13</h2>
<h2>hw14</h2>
<h2>hw15</h2>
<h2>hw16</h2>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation</h4>
<h4>Variables</h4>
<h4>Comments</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a></h4>
<h4>print</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>